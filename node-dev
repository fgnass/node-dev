#! /usr/bin/env node
/*
 * Node.js supervisor that spawns a node child-process and restarts it when changes are detected 
 * in the filesystem. If the child-process exits due to an error, the supervisor waits for another
 * modification before it attempts to re-spawn it. The output written to stderr is captured and 
 * scanned for stack-traces. If an error is detected it is displayed as Growl notification.
 * 
 * Author: Felix Gnass [fgnass at neteye dot de]
 * License: MIT
 * See http://github.com/fgnass/node-dev
 */
var fs = require('fs'),
	sys = require('sys'),
	path = require('path'),
	child_process = require('child_process'),
	server = null,
	error = '',
	files = [],
	args = [].concat(process.argv),
	cmd = args.shift();

args.shift();

for (var i=0, ln=args.length; i<ln; i++){
	if (/\.coffee$/.test(args[i])){
		cmd = 'coffee';
		break;
	}
}

function walk(filename, callback) {
	var stats = fs.statSync(filename);
	if(stats.isFile() && /\.(?:js|coffee)$/.test(filename)) {
		callback(filename);
	}
	else if(stats.isDirectory()) {
		fs.readdir(filename, function(err, files) {
			files.forEach(function(f) {
				fs.realpath(filename + '/' + f, function(err, path) {
					if (!err) {
						walk(path, callback);
					}
				});
			});
		});
	}
}

/**
 * Watches all .js files and restarts the server if a modification is detected.
 */
function watchFiles() {
	files.forEach(fs.unwatchFile);
	files = [];
	walk(process.cwd(), function(file) {
		files.push(file);
		fs.watchFile(file, {interval : 500}, function(curr, prev) {
			if (curr.mtime.valueOf() != prev.mtime.valueOf() || curr.ctime.valueOf() != prev.ctime.valueOf()) {
				if (server) {
					server.on('exit', function (code, signal) {
						if (signal) {
							start('Restarting', 'File modified: ' + file);
								}
					});
					server.kill('SIGHUP');
				}
				else {
					// Server not running, attempt to start it
					start();
				}
			}
		});
	});
}

/**
 * Logs a message to the console. The level is displayed in ANSI colors,
 * either bright red in case of an error or green otherwise.
 */
function log(msg, level) {
	var csi = level == 'error' ? '1;31' : '32';
	sys.log('[\x1B[' + csi + 'm' + level.toUpperCase() + '\x1B[0m] ' + msg);
}

/**
 * Sets the terminal title.
 */
function setTitle(s) {
	sys.print('\033]0;' + s + '\007');
}

// Reset title on exit
process.on('SIGINT', function() {
	setTitle('');
	server.kill('SIGHUP');
	process.exit(0);
});

/**
 * Displays a message as Growl notification.
 * Requires http://growl.info/extras.php#growlnotify
*/
function notify(msg, title, level) {
	level = level || 'info';
	log(title || msg, level);
	child_process.spawn('growlnotify', [
		'-m', msg,
		'--image', __dirname + '/icons/node_' + level + '.png',
		title || 'node.js']);

	setTitle('node-dev');
}

// pump stdin to child-process
var stdin = process.openStdin();
stdin.on('data', function(chunk){
  if (server){
    server.stdin.write(chunk);
  }
});


/**
 * Spawns a node child-process.
 */
function start(title, msg) {
	watchFiles();

	server = child_process.spawn(cmd, args, {customFds: [-1, 1, -1]});
	notify(msg || 'Started', title);

	server.on('exit', function (code, signal) {
		server = null;
	});

	// Data sent to stderr is scanned for stack-traces ...
	server.stderr.on('data', function(data) {
		var s = data.toString(), stack, src, m, file, line, col;

		error += s;
		
		stack = s.match(/^(.+): (.*)\n\s+at\s?.+?\s\(?(.*?):(\d+):(\d+)/m);
		if (stack) {

			// file:line
			// source-code
			//			 ^^^^^
			// ErrorType: Message
			src = error.match(/^\s*(.+):(\d+)\n(.*)\n(\s*)\^/);

			if (src && !src[3].match(/throw/)) {
				file = src[1];
				line = src[2];
				col = src[4].length;
			}
			else {
				// No source-code or error was rethrown
				file = stack[3];
				line = stack[4];
				col = stack[5];
			}

			notify(stack[2] + '\n	 @' + file + ',' + line + ':' + col, stack[1], 'error');
			error = '';
		}
		sys.print(data);
	});
}

if (args.length > 0) {
	start();	
}
else {
	sys.print('Usage: node-dev [options] script.js [arguments]\n');
}