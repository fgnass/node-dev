#! /usr/bin/env node
/*
 * Node.js supervisor that spawns a node child-process and restarts
 * it when the worker commits suicide.
 *
 * Author: Felix Gnass [fgnass at neteye dot de]
 * License: MIT
 * See http://github.com/fgnass/node-dev
 */
var fs = require('fs'),
  path = require('path'),
  child_process = require('child_process'),
  util = require('util'),
  server = null,
  error = '',
  files,
  args = [].concat(process.argv),
  cmd = args.shift();

args.shift();

for (var i=0; i < args.length; i++) {
  if (!/^-/.test(args[i])) {
    args.splice(i, 0, __dirname + '/wrapper.js');
    break;
  }
}

process.stdin.on('data', function (chunk) {
  if (server) {
    server.stdin.write('data: ' + chunk);
  }
});

process.on('SIGINT', function() {
  server.kill('SIGHUP');
  process.exit(0);
});

/**
 * Logs a message to the console. The level is displayed in ANSI colors,
 * either bright red in case of an error or green otherwise.
 */
function log(msg, level) {
  var csi = level == 'error' ? '1;31' : '32';
  util.log('[\x1B[' + csi + 'm' + level.toUpperCase() + '\x1B[0m] ' + msg);
}

/**
 * Displays a desktop notification
 */
function notify(msg, title, level) {
  level = level || 'info';
  log(title || msg, level);
  child_process.spawn(__dirname + '/notify.sh', [
    title || 'node.js',
    msg,
    __dirname + '/icons/node_' + level + '.png'
  ]);
}

function start(title, msg) {
  /** Spawn a node child-process */
  server = child_process.spawn(cmd, args, {customFds: [-1, 1, -1]});
  notify(msg || 'Started', title);
  server.on('exit', function (code) {
    if (code == 101) {
      /** Worker committed suicide */
      start('Restarting', 'Restarting');
    }
    else if (files) {
      /** Worker exited due to an error */
      files.forEach(function(file) {
        fs.watchFile(file, function(cur, prev) {
          if (files && +cur.mtime !== +prev.mtime) {
            /** Stop watching the files */
            files.forEach(function(file) {
              fs.unwatchFile(file);
            });
            files = null;
            /** Resume */
            start("Resuming");
          }
        });
      });
    }
  });

  /** Scan stderr for stack-traces */
  server.stderr.on('data', function(data) {
    var s = data.toString(), stack, src, m, file, line, col;

    error += s;

    stack = s.match(/^(.+): (.*)\n\s+at\s.*?((?:\S|\\\s)+?):(\d+):(\d+)/m);
    if (stack) {

      // file:line
      // source-code
      //       ^^^^^
      // ErrorType: Message
      src = error.match(/^\s*(.+):(\d+)\n(.*)\n(\s*)\^/m);

      if (src && !src[3].match(/throw/)) {
        file = src[1];
        line = src[2];
        col = src[4].length;
      }
      else {
        /** No source-code or error was rethrown */
        file = stack[3];
        line = stack[4];
        col = stack[5];
      }
      notify(stack[2] + '\n  @' + file + ',' + line + ':' + col, stack[1], 'error');

      /** Extract all file paths from the stack-trace */
      files = [file];
      (error.match(/\/(?:\S|\\\s)+?:\d+:\d+/mg) || []).forEach(function(line) {
        file = line.match(/(\/.*?):/)[1];
        if (!~files.indexOf(file)) {
          files.push(file);
        }
      });
      error = '';
    }
    util.print(data);
  });
}

if (args.length > 0) {
  start();
}
else {
  util.print('Usage: node-dev [options] script.js [arguments]\n');
}
